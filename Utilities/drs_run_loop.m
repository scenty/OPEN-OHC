% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Oct-2017 20:43:39
%
% This script assumes these variables are defined:
%
%   x - input data.
%   Y - target data.
function [net,tr]=drs_run_loop(X,Y,hiddenlayernumber,hiddenLayerSize)
input = X';
t = Y';
trainFcn = 'trainbr';  % train lm, br
net = fitnet(hiddenLayerSize,trainFcn);
net.numLayers = hiddenlayernumber;
net.biasConnect=ones(hiddenlayernumber,1);
net.outputConnect=zeros(1,hiddenlayernumber);net.outputConnect(end)=1;
for ii=1:hiddenlayernumber-1
net.layerConnect(ii+1,ii)=1;
end
%net.trainParam.mu_max=1e50;
net.layers{1:hiddenlayernumber-1}.size=hiddenLayerSize;
net.layers{hiddenlayernumber}.size=1;

% net.layers{1:hiddenlayernumber-1}.transferFcn='tansig'; %tansig
net.layers{1}.transferFcn='tansig'; %tansig
net.layers{2}.transferFcn='tansig'; %tansig
net.layers{3}.transferFcn='tansig'; %tansig
% net.layers{2}.transferFcn='poslin'; %tansig
%  net.layers{3}.transferFcn='poslin'; %tansig
% if hiddenlayernumber>2
%  net.layers{hiddenlayernumber-2:hiddenlayernumber-1}.transferFcn='tansig'; %tansig
% end
%net.layers{hiddenlayernumber-2:hiddenlayernumber-1}.transferFcn='tansig'; %tansig
net.layers{hiddenlayernumber}.transferFcn='purelin';
%net.divideFcn = 'divideind'
%net.divideParam.trainInd = 1:35;

net.divideParam.trainRatio = 60/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 20/100;


net.trainParam.showWindow=0;
net.trainParam.showCommandLine=0;
net.trainParam.epochs=200;
net.trainParam.showWindow=1;
%net.performFcn='mse';
net.performParam.regularization=0;
%close all;view(net)
[net,tr] = train(net,input,t,'useParallel','no','showResources','no');
yhat = net(input);
%e = gsubtract(t,yhat);
performance = perform(net,t,yhat);
end
